"""\nUtility functions for OBS YouTube Player.\n"""\n\nimport os\nimport re\nimport unicodedata\nfrom pathlib import Path\nfrom config import TOOLS_SUBDIR\nfrom state import get_cache_dir\n\n# YouTube ID validation pattern\nYOUTUBE_ID_PATTERN = re.compile(r'^[a-zA-Z0-9_-]{11}$')\n\ndef get_tools_path():\n    """Get path to tools directory."""\n    return os.path.join(get_cache_dir(), TOOLS_SUBDIR)\n\ndef get_ytdlp_path():\n    """Get path to yt-dlp executable."""\n    from config import YTDLP_FILENAME\n    return os.path.join(get_tools_path(), YTDLP_FILENAME)\n\ndef get_ffmpeg_path():\n    """Get path to ffmpeg executable."""\n    from config import FFMPEG_FILENAME\n    return os.path.join(get_tools_path(), FFMPEG_FILENAME)\n\ndef sanitize_filename(text):\n    """Sanitize text for use in filename."""\n    # First, replace forward slashes with hyphens to avoid space issues\n    text = text.replace('/', '-')\n    \n    # Remove/replace other invalid filename characters\n    invalid_chars = '<>:"|?*\\'  # Note: forward slash already handled\n    for char in invalid_chars:\n        text = text.replace(char, '_')\n    \n    # Clean up multiple spaces or dashes\n    text = re.sub(r'\s+', ' ', text)  # Replace multiple spaces with single space\n    text = re.sub(r'-+', '-', text)   # Replace multiple dashes with single dash\n    text = re.sub(r'_+', '_', text)   # Replace multiple underscores with single underscore\n    \n    # Remove non-ASCII characters\n    text = unicodedata.normalize('NFKD', text)\n    text = text.encode('ascii', 'ignore').decode('ascii')\n    \n    # Remove any leading/trailing spaces, dashes, or underscores\n    text = text.strip(' -_')\n    \n    # Limit length and clean up\n    text = text[:50].strip().rstrip('.')\n    \n    return text or 'Unknown'\n\ndef ensure_cache_directory():\n    """Ensure cache directory exists."""\n    from logger import log\n    \n    try:\n        cache_dir = get_cache_dir()\n        Path(cache_dir).mkdir(parents=True, exist_ok=True)\n        Path(os.path.join(cache_dir, TOOLS_SUBDIR)).mkdir(exist_ok=True)\n        log(f"Cache directory ready: {cache_dir}")\n        return True\n    except Exception as e:\n        log(f"Failed to create cache directory: {e}")\n        return False\n\ndef validate_youtube_id(video_id):\n    """Validate YouTube video ID format."""\n    return bool(YOUTUBE_ID_PATTERN.match(video_id))\n\ndef format_duration(seconds):\n    """Format seconds into human-readable duration."""\n    if seconds is None or seconds < 0:\n        return "unknown"\n    \n    seconds = int(seconds)\n    if seconds < 60:\n        return f"{seconds}s"\n    \n    minutes = seconds // 60\n    seconds = seconds % 60\n    \n    if minutes < 60:\n        return f"{minutes}m {seconds}s"\n    \n    hours = minutes // 60\n    minutes = minutes % 60\n    return f"{hours}h {minutes}m {seconds}s"\n